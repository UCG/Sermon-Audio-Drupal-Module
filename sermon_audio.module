<?php

/**
 * @file
 * Sermon Audio hook implementations.
 */

declare (strict_types = 1);

use Drupal\Component\Utility\Html;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\file\FileInterface;

/**
 * Implements hook_cron().
 */
function sermon_audio_cron() : void {
  // Automatically refresh sermon audio and transcriptions wherever applicable.
  $storage = \Drupal::entityTypeManager()->getStorage('sermon_audio');

  $idsForAudioRefresh = $storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('cleaning_job_id', NULL, 'IS NOT NULL')
    ->condition('cleaning_job_id', '', '<>')
    ->condition('cleaning_job_failed', TRUE, '<>')
    ->execute();
  assert(is_array($idsForAudioRefresh));
  $idsForTranscriptionRefresh = $storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('transcription_job_id', NULL, 'IS NOT NULL')
    ->condition('transcription_job_id', '', '<>')
    ->condition('transcription_job_failed', TRUE, '<>')
    ->execute();
  assert(is_array($idsForTranscriptionRefresh));

  if ($idsForAudioRefresh !== []) {
    $queue = \Drupal::queue('sermon_audio_processed_audio_refresher');
    // Clean unused items from the queue, as there is no built-in mechanism to
    // check if an entity ID already exists in the queue.
    while ($item = $queue->claimItem()) {
      $queue->deleteItem($item);
    }

    foreach ($idsForAudioRefresh as $id) {
      $queue->createItem((int) $id);
    }
  }

  if ($idsForTranscriptionRefresh !== []) {
    $queue = \Drupal::queue('sermon_audio_transcription_refresher');
    while ($item = $queue->claimItem()) {
      $queue->deleteItem($item);
    }

    foreach ($idsForTranscriptionRefresh as $id) {
      $queue->createItem((int) $id);
    }
  }
}

/**
 * Implements hook_field_views_data().
 *
 * Adds a Views relationship for the target sermon audio entity.
 *
 * @see core_field_views_data()
 */
function sermon_audio_field_views_data(FieldStorageConfigInterface $field_storage) {
  $data = views_field_default_views_data($field_storage);

  if ($field_storage->getType() != 'sermon_audio') {
    return $data;
  }
  if ($field_storage->getSetting('target_type') != 'sermon_audio') {
    // Something is wrong...
    return $data;
  }

  $fieldName = $field_storage->getName();
  $args = ['@field_name' => $fieldName];
  foreach ($data as $tableName => $d) {
    $data[$tableName][$fieldName]['relationship'] = [
      'title' => t('Sermon Audio referenced from @field_name', $args),
      'label' => t('@field_name: Sermon Audio', $args),
      'group' => t('Sermon Audio'),
      'help' => t('Appears in: @bundles.', ['@bundles' => implode(', ', $field_storage->getBundles())]),
      'id' => 'standard',
      'base' => 'sermon_audio_field_data',
      'base field' => 'entity_id',
      'relationship field' => ($fieldName . '_target_id'),
    ];
  }

  return $data;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sermon_audio_preprocess_file_link(array &$variables) : void {
  if (!empty($variables['sermon_audio_suppress_link'])) {
    $file = $variables['file'];
    if (!($file instanceof FileInterface)) {
      throw new \RuntimeException('Invalid file_link theme hook #file variable.');
    }
    // In this case, we don't want to show an actual link to the file. Hence,
    // override the "link" variable with the sanitized plain-text filename (it
    // should be sanitized by Twig automatically, but we do so here just in case
    // a template is used which suppresses this sanitization, etc).
    $variables['link'] = Html::escape($file->getFilename());
  }
}

/**
 * Implements hook_theme().
 */
function sermon_audio_theme() : array {
  return [
    'sermon_audio_player_no_processed_audio' => [
      'template' => 'sermon-audio-player-no-processed-audio',
    ],
    'sermon_audio_player_broken_processed_audio' => [
      'template' => 'sermon-audio-player-broken-processed-audio',
    ],
    'sermon_audio_link_no_processed_audio' => [
      'template' => 'sermon-audio-link-no-processed-audio',
    ],
    'sermon_audio_link_broken_processed_audio' => [
      'template' => 'sermon-audio-link-broken-processed-audio',
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter().
 */
function sermon_audio_theme_registry_alter(array &$registry) : void {
  // Add a "sermon_audio_suppress_link" variable to the set of "file_link" theme
  // hook variables.
  if (!empty($registry['file_link'])) {
    $registry['file_link']['variables']['sermon_audio_suppress_link'] = NULL;
  }
}
