<?php

declare (strict_types = 1);

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\StorageInterface;

/**
 * @file
 * Contains install hook implementations for the Sermon Audio module.
 */

/**
* Implements hook_install().
*/
function sermon_audio_install(bool $is_syncing) {
  // Some configuration does not install correctly when placed in
  // config/install, because of dependency resolution issues. Hence, we must
  // install some of it manually. Everything in config/install should already
  // be installed, so we make that assumption.

  // If we are syncing, we don't want to install anything, because the syncing
  // process should take care of it.
  if ($is_syncing) return;

  // First, set up the source config storage object, which takes configuration
  // from the set of YAML files in the config/custom-install directory.
  $inputConfigStorage = new FileStorage(__DIR__ . '/config/custom-install');

  $outputConfigStorage = \Drupal::service('config.storage');
  assert($outputConfigStorage instanceof StorageInterface);

  // Note: Under the assumption that the config is stored in the DB, we could
  // run the following statements within a transaction. However, because config
  // may be written to the cache after a successful write to the DB, and because
  // it is plausible that a non-DB cache backend is in use (e.g., Memcached), we
  // don't do so to avoid strange bugs.
  
  // Make a list of configuration object names we wish to install, and place
  // them in the order we wish to install them.
  $configNames = [
    // Start by installing the processed_audio media type, because the field
    // instances may require that their target bundle exists.
    'media.type.processed_audio',
    // Next, install all the field instances.
    'field.field.media.processed_audio.field_audio_processing_initiated',
    'field.field.media.processed_audio.field_duration',
    'field.field.media.processed_audio.field_processed_audio',
    'field.field.media.processed_audio.field_unprocessed_audio',
    // Finally, install the form and view display config stuff.
    'core.entity_form_display.media.processed_audio.default',
    'core.entity_form_display.media.processed_audio.media_library',
    'core.entity_view_display.media.processed_audio.default',
    'core.entity_view_display.media.processed_audio.media_library',
  ];

  // Try to avoid overwriting existing configuration.
  foreach ($configNames as $name) {
    if ($outputConfigStorage->exists($name)) {
      throw new \RuntimeException('Configuration object "' . $name . '" already exists.');
    }
  }

  // Install the configuration.
  foreach ($configNames as $name) {
    $data = $inputConfigStorage->read($name);
    if ($data === FALSE) {
      throw new \RuntimeException('Could not read input configuration with name "' . $name . '".');
    }
    if (!$outputConfigStorage->write($name, $data)) {
      throw new \RuntimeException('Could not read output configuration with name "' . $name . '".');
    }
  }
}
