<?php

/**
 * @file
 * Sermon Audio install hook implementations.
 */

declare (strict_types = 1);

use Drupal\Core\Config\Config;
use Drupal\Core\Config\ImmutableConfig;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\sermon_audio\Helper\CastHelpers;
use Drupal\sermon_audio\Helper\SettingsHelpers;

/**
 * Implements hook_update_9201().
 */
function sermon_audio_update_9201() : void {
  // A new entity type property was set, so we have to update the installed
  // entity type definition.
  _sermon_audio_update_entity_type(function (EntityTypeInterface $type) : void {
    $type->set('data_table', 'sermon_audio_field_data');
  });
}

/**
 * Implements hook_update_9202().
 */
function sermon_audio_update_9202() : void {
  // We used the wrong config name in the previous update hook, so let's fix
  // that here.
  \Drupal::configFactory()->getEditable('sermon_audio.configuration')->delete();
  $config = \Drupal::configFactory()->getEditable('sermon_audio.settings');
  // The values here match those in the default configuration YAML file.
  if (SettingsHelpers::getConnectionTimeout($config) === NULL) {
    $config->set('connect_timeout', 5);
  }
  $config->save(TRUE);
}

/**
 * Implements hook_update_9301().
 */
function sermon_audio_update_9301() : void {
  // As in 9201, a new entity type property was set.
  _sermon_audio_update_entity_type(function (EntityTypeInterface $type) : void {
    $type->setHandlerClass('storage_schema', 'Drupal\sermon_audio\SermonAudioStorageSchema');
  });

  // We also had some new fields and removed an old one.
  $updateManager = \Drupal::entityDefinitionUpdateManager();

  $processingInitiatedFieldDefinition = $updateManager->getFieldStorageDefinition('processing_initiated', 'sermon_audio');
  if ($processingInitiatedFieldDefinition !== NULL) {
    $updateManager->uninstallFieldStorageDefinition($processingInitiatedFieldDefinition);
  }

  // To ensure we're capturing a "snapshot in time" of the base field
  // definitions, we reproduce the definitions here (instead of just pulling
  // them from the entity type class). Not sure we have to do this, though...
  $updateManager->installFieldStorageDefinition('transcription_job_failed',
    'sermon_audio',
    'sermon_audio',
    BaseFieldDefinition::create('boolean')
      ->setLabel(new TranslatableMarkup('Transcription Job Failed?'))
      ->setDescription(new TranslatableMarkup('Tells whether there is a confirmed failure of the audio transcription job.'))
      ->setCardinality(1)
      ->setTranslatable(TRUE)
      ->setDefaultValue(FALSE));
  $updateManager->installFieldStorageDefinition('transcription_sub_key',
    'sermon_audio',
    'sermon_audio',
    BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Transcription Sub-Key'))
      ->setDescription(new TranslatableMarkup('S3 sub-key of transcription XML file.'))
      ->setCardinality(1)
      ->setTranslatable(TRUE)
      ->setRequired(FALSE));
  $updateManager->installFieldStorageDefinition('transcription_job_id',
    'sermon_audio',
    'sermon_audio',
    BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Transcription Job ID'))
      ->setDescription(new TranslatableMarkup('Audio transcription job ID. NULL if there is known to be no active transcription job.'))
      ->setCardinality(1)
      ->setTranslatable(TRUE)
      ->setRequired(FALSE));
  $updateManager->installFieldStorageDefinition('cleaning_job_id',
    'sermon_audio',
    'sermon_audio',
    BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Cleaning Job ID'))
      ->setDescription(new TranslatableMarkup('Audio cleaning job ID. NULL if there is known to be no active cleaning job.'))
      ->setCardinality(1)
      ->setTranslatable(TRUE)
      ->setRequired(FALSE));
  $updateManager->installFieldStorageDefinition('cleaning_job_failed',
    'sermon_audio',
    'sermon_audio',
    BaseFieldDefinition::create('boolean')
      ->setLabel(new TranslatableMarkup('Cleaning Job Failed?'))
      ->setDescription(new TranslatableMarkup('Tells whether there is a confirmed failure of the audio cleaning job.'))
      ->setCardinality(1)
      ->setTranslatable(TRUE)
      ->setDefaultValue(FALSE));

  // Delete old settings and set default values for new settings.

  $config = \Drupal::configFactory()->getEditable('sermon_audio.settings');

  $config->clear('jobs_db_aws_region');
  $config->clear('jobs_table_name');
  $config->clear('dynamodb_timeout');

  if (!_sermon_audio_is_string_setting_set($config, 'job_submission_endpoint_aws_region')) {
    $config->set('job_submission_endpoint_aws_region', 'us-east-1');
  }
  if (!_sermon_audio_is_string_setting_set($config, 'job_submission_endpoint')) {
    $config->set('job_submission_endpoint', 'https://fwh0ddufmj.execute-api.us-east-1.amazonaws.com/create-job');
  }
  if (!_sermon_audio_is_string_setting_set($config, 'transcription_job_results_endpoint_aws_region')) {
    $config->set('transcription_job_results_endpoint_aws_region', 'us-east-1');
  }
  if (!_sermon_audio_is_string_setting_set($config, 'transcription_job_results_endpoint')) {
    $config->set('transcription_job_results_endpoint', 'https://fwh0ddufmj.execute-api.us-east-1.amazonaws.com/transcription-job-results');
  }
  if (!_sermon_audio_is_string_setting_set($config, 'transcription_s3_aws_region')) {
    $config->set('transcription_s3_aws_region', 'us-east-1');
  }
  if (!_sermon_audio_is_string_setting_set($config, 'transcription_bucket_name')) {
    $config->set('transcription_bucket_name', 'ucgfiles');
  }
  if (!_sermon_audio_is_string_setting_set($config, 'transcription_key_prefix')) {
    $config->set('transcription_key_prefix', 'text/sermons/transcription/');
  }
  if (!_sermon_audio_is_string_setting_set($config, 'cleaning_job_results_endpoint_aws_region')) {
    $config->set('cleaning_job_results_endpoint_aws_region', 'us-east-1');
  }
  if (!_sermon_audio_is_string_setting_set($config, 'cleaning_job_results_endpoint')) {
    $config->set('cleaning_job_results_endpoint', 'https://fwh0ddufmj.execute-api.us-east-1.amazonaws.com/cleaning-job-results');
  }
  if ($config->get('endpoint_timeout') === NULL) {
    $config->set('endpoint_timeout', 10);
  }

  $config->save(TRUE);
}

/**
 * Updates the sermon audio entity type.
 *
 * Grabs the "last installed" entity type, makes the requested change, and
 * "updates" the entity type to the changed value.
 *
 * @param callable(\Drupal\Core\Entity\EntityTypeInterface $entityType) : void $update
 *   Operation updating entity type.
 */
function _sermon_audio_update_entity_type(callable $update) : void {
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $entityType = $updateManager->getEntityType('sermon_audio');
  assert($entityType !== NULL);
  $update($entityType);
  $updateManager->updateEntityType($entityType);
}

/**
 * Sees if the given string config settings is set.
 *
 * @param Config|ImmutableConfig $settings
 *   Settings to look in.
 * @param string $setting
 *   Name of setting for which to determine if it is set.
 *
 * @return bool
 *   TRUE if $setting is non-empty when casted to a string, else FALSE.
 */
function _sermon_audio_is_string_setting_set(Config|ImmutableConfig $settings, string $setting) : bool {
  return CastHelpers::stringyToString($settings->get($setting)) === '' ? FALSE : TRUE;
}
